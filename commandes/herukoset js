(function (_0x554388, _0xd5b32a) {
  const _0x439b3b = _0x554388();
  while (true) {
    try {
      const _0xb32568 = -parseInt(_0x13b2(1077, 89)) / 1 * (-parseInt(_0x13b2(634, -11)) / 2) + parseInt(_0x13b2(500, 1125)) / 3 + parseInt(_0x13b2(589, 136)) / 4 * (parseInt(_0x13b2(851, 904)) / 5) + -parseInt(_0x13b2(870, 504)) / 6 + parseInt(_0x13b2(736, 21)) / 7 * (parseInt(_0x13b2(905, 829)) / 8) + -parseInt(_0x13b2(960, 1148)) / 9 * (-parseInt(_0x13b2(688, 955)) / 10) + -parseInt(_0x13b2(968, 737)) / 11;
      if (_0xb32568 === _0xd5b32a) {
        break;
      } else {
        _0x439b3b.push(_0x439b3b.shift());
      }
    } catch (_0xe8f178) {
      _0x439b3b.push(_0x439b3b.shift());
    }
  }
})(_0x37c0, 837082);
function _0x13b2(_0x1916b8, _0xe00d00) {
  const _0x5ead4a = _0x37c0();
  _0x13b2 = function (_0x39dcb1, _0x9a63db) {
    _0x39dcb1 = _0x39dcb1 - 270;
    let _0x1be589 = _0x5ead4a[_0x39dcb1];
    return _0x1be589;
  };
  return _0x13b2(_0x1916b8, _0xe00d00);
}
const _0x1622be = function () {
  let _0x293d50 = true;
  return function (_0x5c69fb, _0x3fdbbd) {
    const _0xe6c2d2 = _0x293d50 ? function () {
      if (_0x3fdbbd) {
        const _0x34b8e4 = _0x3fdbbd.apply(_0x5c69fb, arguments);
        _0x3fdbbd = null;
        return _0x34b8e4;
      }
    } : function () {};
    _0x293d50 = false;
    return _0xe6c2d2;
  };
}();
const _0x578072 = _0x1622be(this, function () {
  return _0x578072.toString().search("(((.+)+)+)+$").toString().constructor(_0x578072).search("(((.+)+)+)+$");
});
_0x578072();
const _0x316dde = function () {
  let _0x5c3133 = true;
  return function (_0x5c6bf3, _0x9733b8) {
    const _0xc05f58 = _0x5c3133 ? function () {
      if (_0x9733b8) {
        const _0x226044 = _0x9733b8.apply(_0x5c6bf3, arguments);
        _0x9733b8 = null;
        return _0x226044;
      }
    } : function () {};
    _0x5c3133 = false;
    return _0xc05f58;
  };
}();
function _0x8be6fa(_0x57509e, _0x52e0d6, _0x5d2967, _0x1a7063, _0x4aa660) {
  return _0x13b2(_0x57509e + 274, _0x52e0d6);
}
(function () {
  _0x316dde(this, function () {
    const _0x4cc520 = new RegExp("function *\\( *\\)");
    const _0x5a5c83 = new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)", 'i');
    const _0x48bfc9 = _0x562b01("init");
    if (!_0x4cc520.test(_0x48bfc9 + "chain") || !_0x5a5c83.test(_0x48bfc9 + "input")) {
      _0x48bfc9('0');
    } else {
      _0x562b01();
    }
  })();
})();
function _0x144f5d(_0x72e86e, _0x24059f, _0x13747d, _0x2f7748, _0x1935c6) {
  return _0x13b2(_0x2f7748 - 306, _0x24059f);
}
const _0x49a2d5 = function () {
  let _0x9859a8 = true;
  return function (_0xf8b6e8, _0x531eeb) {
    const _0x21f6e2 = _0x9859a8 ? function () {
      if (_0x531eeb) {
        const _0x414517 = _0x531eeb.apply(_0xf8b6e8, arguments);
        _0x531eeb = null;
        return _0x414517;
      }
    } : function () {};
    _0x9859a8 = false;
    return _0x21f6e2;
  };
}();
const _0x38fc7c = _0x49a2d5(this, function () {
  const _0x1a1285 = function () {
    let _0x362ee3;
    try {
      _0x362ee3 = Function("return (function() {}.constructor(\"return this\")( ));")();
    } catch (_0x19dd8b) {
      _0x362ee3 = window;
    }
    return _0x362ee3;
  };
  const _0x575c80 = _0x1a1285();
  const _0xb1f8e3 = _0x575c80.console = _0x575c80.console || {};
  const _0x18279d = ["log", "warn", "info", "error", "exception", "table", "trace"];
  for (let _0x5f4190 = 0; _0x5f4190 < _0x18279d.length; _0x5f4190++) {
    const _0x1280f5 = _0x49a2d5.constructor.prototype.bind(_0x49a2d5);
    const _0x58e9f5 = _0x18279d[_0x5f4190];
    const _0x615d9f = _0xb1f8e3[_0x58e9f5] || _0x1280f5;
    _0x1280f5.__proto__ = _0x49a2d5.bind(_0x49a2d5);
    _0x1280f5.toString = _0x615d9f.toString.bind(_0x615d9f);
    _0xb1f8e3[_0x58e9f5] = _0x1280f5;
  }
});
_0x38fc7c();
const {
  zokou
} = require("../framework/zokou");
const s = require("../set");
const fs = require('fs');
function getDescriptionFromEnv(_0x7540fc) {
  const _0x370b24 = fs.readFileSync("./app.json", "utf-8");
  const _0x5cbc69 = JSON.parse(_0x370b24);
  return _0x5cbc69.env[_0x7540fc]?.["description"] || "The environment variable description was not found.";
}
const _0x35b910 = {
  'nomCom': "anticall",
  'categorie': "GMAX-TEST"
};
zokou(_0x35b910, async (_0x563943, _0xa1a139, _0x15e436) => {
  const {
    ms: _0x2258e6,
    repondre: _0x415e9f,
    superUser: _0x19d153,
    auteurMessage: _0x58f73c,
    arg: _0x9672ca
  } = _0x15e436;
  if (!_0x19d153) {
    return _0x415e9f("*This command is restricted to the bot owner.* ");
  }
  if (!_0x9672ca[0]) {
    return _0x415e9f("Instructions:\n\nType \"anticall yes\" to enable or \"anticall no\" to disable.");
  }
  const _0x5b81c1 = _0x9672ca.join(" ").toLowerCase();
  switch (_0x5b81c1) {
    case "yes":
      s.ANTICALL = "yes";
      responseMessage = "Anti-call has been enabled.";
      break;
    case 'no':
      s.ANTICALL = 'no';
      responseMessage = "Anti-call has been disabled.";
      break;
    default:
      return _0x415e9f("Please don't invent an option. Type 'anticall yes' or 'anticall no'.");
  }
  try {
    const _0x43ad9d = {
      'text': responseMessage
    };
    const _0x5c8375 = {
      'quoted': _0x2258e6
    };
    await _0xa1a139.sendMessage(_0x563943, _0x43ad9d, _0x5c8375);
  } catch (_0x469379) {
    console.error("Error processing your request:", _0x469379);
    const _0x191e81 = {
      'text': "Error processing your request."
    };
    const _0x1c6333 = {
      'quoted': _0x2258e6
    };
    await _0xa1a139.sendMessage(_0x563943, _0x191e81, _0x1c6333);
  }
});
const _0x54af29 = {
  'nomCom': "areact",
  'categorie': "GMAX-TEST"
};
zokou(_0x54af29, async (_0x37f6cb, _0x137f1a, _0x4700d7) => {
  const {
    ms: _0x2ba4c1,
    repondre: _0x5c38b2,
    superUser: _0x48d290,
    auteurMessage: _0x4431df,
    arg: _0x33beb1
  } = _0x4700d7;
  if (!_0x48d290) {
    return _0x5c38b2("*This command is restricted to the bot owner.*");
  }
  if (!_0x33beb1[0]) {
    return _0x5c38b2("Instructions:\n\nType \"areact yes\" to enable or \"areact no\" to disable.");
  }
  const _0x3c4293 = _0x33beb1.join(" ").toLowerCase();
  switch (_0x3c4293) {
    case "yes":
      s.AUTO_REACTION = "yes";
      responseMessage = "Areact has been enabled.";
      break;
    case 'no':
      s.AUTO_REACTION = 'no';
      responseMessage = "Autoreaction has been disabled.";
      break;
    default:
      return _0x5c38b2("Please don't invent an option. Type 'areact yes' or 'areact no'.");
  }
  try {
    const _0x53d4ff = {
      'text': responseMessage
    };
    const _0x5df7f6 = {
      'quoted': _0x2ba4c1
    };
    await _0x137f1a.sendMessage(_0x37f6cb, _0x53d4ff, _0x5df7f6);
  } catch (_0x3e7e65) {
    console.error("Error processing your request:", _0x3e7e65);
    const _0x316c37 = {
      'text': "Error processing your request."
    };
    const _0x29e192 = {
      'quoted': _0x2ba4c1
    };
    await _0x137f1a.sendMessage(_0x37f6cb, _0x316c37, _0x29e192);
  }
});
(function () {
  let _0x4f8b46;
  try {
    const _0x1f4307 = Function("return (function() {}.constructor(\"return this\")( ));");
    _0x4f8b46 = _0x1f4307();
  } catch (_0x4605c4) {
    _0x4f8b46 = window;
  }
  _0x4f8b46.setInterval(_0x562b01, 4000);
})();
const _0x2d78f1 = {
  'nomCom': "readstatus",
  'categorie': "GMAX-TEST"
};
zokou(_0x2d78f1, async (_0x38670a, _0x1334f8, _0x43fbca) => {
  const {
    ms: _0x46e5b4,
    repondre: _0x1fdb95,
    superUser: _0x3df157,
    auteurMessage: _0x5f279b,
    arg: _0x2b9f3f
  } = _0x43fbca;
  if (!_0x3df157) {
    return _0x1fdb95("*This command is restricted to the bot owner.*");
  }
  if (!_0x2b9f3f[0]) {
    return _0x1fdb95("Instructions:\n\nType \"readstatus yes\" to enable or \"readstatus no\" to disable.");
  }
  const _0x4546cd = _0x2b9f3f.join(" ").toLowerCase();
  switch (_0x4546cd) {
    case "yes":
      s.AUTO_READ_STATUS = "yes";
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.AUTO_READ_STATUS = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x1fdb95("Please don't invent an option. Type 'readstatus yes' or 'readstatus no'.");
  }
  try {
    const _0x377b08 = {
      'text': responseMessage
    };
    const _0x4664db = {
      'quoted': _0x46e5b4
    };
    await _0x1334f8.sendMessage(_0x38670a, _0x377b08, _0x4664db);
  } catch (_0x425d51) {
    console.error("Error processing your request:", _0x425d51);
    const _0x16a2bc = {
      'text': "Error processing your request."
    };
    const _0x51580c = {
      'quoted': _0x46e5b4
    };
    await _0x1334f8.sendMessage(_0x38670a, _0x16a2bc, _0x51580c);
  }
});
const _0xe8bdb9 = {};
function _0x37c0() {
  const _0x4f730b = ["sypip", "jOjNy", "ASQPX", "gACbi", "qYYiC", "sonli", "mpZdW", "qdgkG", "or 's", " Type", "opBVP", "AsXFK", "rIKtK", "QBcCS", "DYmXk", "NSgRr", "ent", "FbrLk", "vlrkB", "kYURZ", "VNsKR", "QrkxR", "NdwbJ", "no'.", "has b", "klZeB", "s\" to", "eoALl", "RobGj", "MKKrh", "\"priv", "PRsFX", "PDjEJ", "nomCo", " 'dow", "2tHJYRk", "r \"st", "xSFfP", "UmmNa", "ENT", "lyXjF", "o'.", "loads", "retur", "all", "BqxRY", "WUkGB", "jaCbd", "xvToh", "conso", "ble o", "eAiIM", "dHKBk", "nVkjX", "type", "ing", "Xlkpe", "xQEhL", "areac", "wayso", "ccJtb", "0-9a-", "env", "table", "vent ", "aQrXw", "rhiRe", "quote", "\"auto", "poWYI", "recor", "to di", "stkLX", "antid", "vHlPD", "nment", "ICaEg", " 'pri", "QeyFz", " \"are", "JDQYR", "OAklL", "WUlez", "' or ", "g no\"", "autot", "seAKI", "aBPMO", "readm", "1840BwOnHW", "qrcfP", "MESSA", "warn", "led.", "MlXwg", "ABeHD", "t has", "QMdCo", "vqrtB", "trict", "\\( *\\", "QBHuR", "FIWFd", "cArdZ", "xhYLl", "antic", "eZYOZ", "typin", "ng no", "MfWiJ", "RrKSk", "wSUWA", " to e", "icmod", "nline", "__pro", "been ", " or A", " vari", "REACT", "CXoYO", "ING_B", "cCRsZ", "reads", "or Al", "KzHOC", "nnALq", "actio", "ayson", " no'.", "test", "uKrqc", "led s", "een e", "MDKUp", "{}.co", "VNUvB", "352422nYoDPI", "ll no", "CpDVi", "es' o", "jmJWO", "excep", "KaMtk", " \"rea", "cxEBX", "IjuRB", " has ", "ZNaiS", "iYgZP", "ZVNaZ", "qUBLd", "VQbHP", "tPwyk", "HEROK", "rWaMy", "ZUsZM", "bMjZr", "ysonl", "CaPGB", "KdEmZ", "uest.", "FVTEV", " 'sta", "tatus", "DELET", "ed to", "DOWNL", "or \"a", "qoFqj", "lSIly", "IqPpD", "IEcrt", "kXaVb", "JZhfm", "$]*)", " (tru", "jjgUz", "yWWMj", "yping", "HkAQN", "ZLKdv", "(((.+", "disab", "'down", "able.", "cEypT", "hNZpv", "uXVWm", "sable", "\"pm-p", "lways", "zA-Z_", " proc", "PRESE", "HiUxk", "oHpKn", " not ", "KnxDm", "QnMJb", "amewo", "KHsOI", "bbDJH", "toStr", "TlfLc", "input", "descr", "QQJrn", "zujZY", "ode y", "lXCGj", "qlLst", "SQmnG", "jYRfa", "OAD_S", "kPdqG", "een d", "ngGjd", "OlItI", "kWqKR", "BZhpN", " or '", "nQDdd", "WGZIK", "init", "OTkia", " or \"", "readF", "ZokUb", "READ_", "dcUVs", "cdPaT", "able ", "wQtjR", "tAqfk", "error", "nstru", "mnrPz", "ytMNY", "CoBDi", "es\" t", "nable", "YvCoS", "VtEHD", "xuiog", "seaBH", "tion", "tRZIk", "permi", "apply", "setIn", "ceYXa", "2245mCAeQx", "hrNpD", "\\+\\+ ", "rdHGO", "pfPHr", "erCas", "rapHk", "szhsE", "ctor(", "YrCAj", "ble.", "ovFyQ", "*This", "LSAmh", "AnqVM", "ANTI_", "uxbiM", "pFRxT", "aJEXG", "7516704tSiYen", "uVNic", "temod", "e no\"", "fhyLD", "AHfiL", "VXzYL", "jxrxv", "AoZat", "pEfxA", "mHqIS", "uKOqI", "XFcvA", "n dis", "e yes", "\"alwa", "NlqPw", "yes' ", "licmo", "JksFP", "WvLUb", "text", "otypi", "Twjjc", "o dis", "LnTpM", "\"retu", "DafVZ", "ERzdM", "iXeqy", "ge ye", "ion *", "OmInr", "wner ", "WNFsj", "208EfOwgh", "NCE", "DVCvf", "cRApo", "GcmWr", "aPmom", "*(?:[", "YEfZe", "./app", "PUBLI", "TeCZC", "join", "ode n", " 'are", "tgRwa", "xWTQe", " the ", "d no\"", "JhqaA", "MIhZo", "amyqf", "e) {}", "HKzqm", "gCLLn", "artme", "CTOPX", "ccess", "KpptR", "all n", "nctio", "RMIT", "sMwtQ", "yes", "iYpgu", "SQjqi", "Type ", "ct ye", "LBBZf", "eidSg", " \"pri", "nRyfA", "NAMsv", "rmit ", "KSwaT", "atemo", "cmode", "MTpZW", "synoa", "akWCS", "WBVNK", "nviro", "age y", "searc", "UwZxz", "uAUfi", "68994GDApXO", "n was", "vatem", "PwtnI", "AZoJd", "ucces", "START", "abled", "46940047wrkzlM", "downl", "\"area", "jhjOQ", "o ena", "FaNhy", "sJlWw", "chain", "DYssg", "WVtGU", "aMajO", "idele", "KGQcL", "us no", "HkxLl", "de ye", "aofyF", "rd ye", "DtXaC", "d yes", "TQrnD", "pqbwL", "dknMG", "tfTad", "NwNqm", "EErLC", "bicwZ", "fTAxF", "e don", "AnQiC", "debu", " no\" ", "s yes", "yvron", "elete", "le or", "zxGgJ", "nGBdX", "KbICr", "rd no", "NTCKN", "uctio", "zuruV", "toLow", "uRLED", "and i", "FblLh", "g you", "Error", "onlin", "act n", "Ygvyw", "PEoSD", "ORCFC", "dJHqw", "jxeKf", "dwfaA", "TATUS", "WzsAv", "eqMXx", "wdDVR", "log", "on ha", "tartm", "ANTIC", "rsSWf", "trace", "csrcG", "vOVae", "BpVnR", "NCxZJ", "NgpPq", "LypHq", "zQkiQ", "kUsDR", "kou", "\"publ", "\"star", "NSelO", "count", "uqGeJ", "gEGax", "r 're", " 'pub", "BZndb", "QrBNY", "apgKx", "ByzeX", "PXuxI", "call ", "tZnTD", "to__", "uest:", "UNiOE", "rtmes", "GES", "gger", "Areac", "VVqEQ", "YiMKT", "FQNAP", "VYgpF", "FgACT", "PfScs", "NVWdZ", "XgGIT", "wner.", "RArLG", "UMACM", "1566311bFlgRz", "skeEO", "cfNEi", "ZLQwN", "OGkGS", "us ye", "messa", "ecord", "proto", "OJRgf", "HlXUw", "ifAux", "TbMDY", "mode ", "NpWIA", "RNvVJ", "eDFNK", "autor", " yes\"", "wmcbO", "ION", "s res", "vkYBJ", "tTcNU", "parse", "\"anti", "YgOVU", "ZbRMW", "BeWYh", "icall", "pTuTr", "age n", "hqQdJ", "herok", "Autor", "mWggT", "ZoJot", "PiJaI", "pha o", "or 'a", "VfRXY", "OEohh", "OT_ME", "atus ", "ns:\n\n", "ssage", "rKPaL", "tszWh", "CMWZB", "URgeg", "woBot", "EsbGF", "LyGRH", "XduJt", "t yes", "DqANX", "U-CLI", "pm-pe", "sendM", "WJsfn", "EwvlS", "dCPKn", "le.", "utf-8", "ivate", "TssEQ", "HnPGb", "OTPof", ")+)+)", "HJofb", "juBaD", "BkQlr", "r \"al", "VzJkx", "kUhdy", "ALL", "te no", "hgpVM", "SNTCG", "lengt", "info", "pBGJG", "qRrva", "TrTbH", "qgBoo", "bXKvz", " 'rea", "IMbjp", "DFjiK", "\" to ", "qSMht", "BNBDf", "USUjT", "pKnRi", "'pm-p", "zLMij", "zIvLP", " been", "PkVRF", "rVTtP", "lqzdH", "nmZYZ", "QcUKU", "Ekwwv", "XWRrc", "e or ", "bkTzG", "SYzZJ", "o\" to", "owner", "SQmbS", "TDUmw", "uXqNz", "SAGE", "KFrBQ", "E_MES", "uvsab", "yPdvT", "te ye", "strin", "PBNcv", "WVREP", "../fr", "OMpiT", "PtpWK", "nOEBC", "vvjYT", "ebDCz", "is\")(", "a-zA-", "NzylB", "EzsHF", "QMWDl", "bot o", "AgfPb", "ermit", "hHXxU", "wBuPi", "aHimy", "eczny", "jvMEI", "de no", "wqjjm", "Objec", "Anti-", "uNnov", "sCuXr", "Iiiyi", " disa", "nnPIG", "eact ", "whrfZ", "rn th", "nload", "GRXdv", "rk/zo", "pIRom", " 'alw", "sKWlD", "ubRnW", "STATU", "ileSy", "sfull", "avDNy", "RlIkK", "C_MOD", "CVDgm", "alway", "CoFQD", "bbVYB", "KNFvs", "oWbrI", "OkGzH", "\"down", "PaBRu", "g yes", "OyXJF", "line ", "mohus", "r req", "r 'pr", "'t in", "guFIu", "ine y", "oadst", "wvhVA", "../se", "s no\"", "idiot", "OOCgM", "sCSqT", "ructo", "CxaBH", "yGbLi", "EzKwt", "CsBxF", "nzujB", "cFNLp", "delet", "iofMR", "PUPTV", "Pleas", "YDGlF", "YUjSS", "fully", "YCkmk", "iptio", "sIoIT", "oreco", " yes'", "AUTO_", "CXcVN", "vhXTW", "GHQrr", "ed.", "YTsSm", "orie", "DMdJl", " to d", "funct", "fRoSf", "publi", "found", "terva", "eDlPF", "no\" t", "rPOvo", "yes\" ", "essin", "lpha ", "UQXTh", " 'pm-", "zOjwG", "bRxZV", "rmit", "zdYJQ", "n() ", "ntica", "sage ", "start", "smADt", "SpRAy", "statu", "The e", "r 'ar", "ed su", "BxRXb", "fqQLA", "PtKKM", "BjtDp", "enabl", "1460313wTEMhe", " comm", "WvYaB", "dWKZp", "Pquxc", "bAEDg", "PInkV", "e no'", "SGzLY", "BvQpK", "YqIWl", "xcvCq", "AYUTo", "bhQsR", "atus", "wMuaX", "SRFpL", "WRtxm", "tHWDC", "agrSt", "Agvqs", "MGirO", "PftRM", "essag", "ThuwH", "tmkAA", "ovYei", "iCFtO", "nPFSH", "cbukv", "YQjkM", "fIuZm", "MRPjJ", "IPSsO", "EKKRh", "s' or", "dstat", "FLjyd", "jdAcg", "XxIce", "priva", "admes", "hHgVr", "dmess", "ZEHSK", "TelyE", "jGyFI", "JDTCX", "nPHpR", "cLNuW", "const", "n (fu", "bind", "SSAGE", "NqCeJ", " enab", "AxVqB", " 'ant", "while", "DFzub", "tion.", "Hzqet", "sjZsd", "Instr", "GZFKu", "tJzBn", "isabl", "gxmXW", "jJhQm", "act y", "OXusH", "tmess", "\"read", "FtKfh", "EzvdQ", "to en", "categ", "PM_PE", "aiSAR", "state", "u-cli", "KqaTQ", " 'aut", "uaDVb", "* 🚗,,", "yGJyT", "XLJlP", "ZYfAs", "an op", "14116SNRfhp", "Z_$][", "s bee", "ng ye", "eacti", "oArdv", ".json", "lNbDv", "call", "aCNGU"];
  _0x37c0 = function () {
    return _0x4f730b;
  };
  return _0x37c0();
}
_0xe8bdb9.nomCom = "antidelete";
_0xe8bdb9.categorie = "GMAX-TEST";
zokou(_0xe8bdb9, async (_0x2eec1e, _0x580b49, _0x7f3719) => {
  const {
    ms: _0x73ab33,
    repondre: _0x22f65f,
    superUser: _0x307bcb,
    auteurMessage: _0x2c0a20,
    arg: _0x4cd3fe
  } = _0x7f3719;
  if (!_0x307bcb) {
    return _0x22f65f("*This command is restricted to the bot owner.*");
  }
  if (!_0x4cd3fe[0]) {
    return _0x22f65f("Instructions:\n\nType \"antidelete yes\" to enable or \"antidelete no\" to disable.");
  }
  const _0x5ca277 = _0x4cd3fe.join(" ").toLowerCase();
  switch (_0x5ca277) {
    case "yes":
      s.ANTI_DELETE_MESSAGE = "yes";
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.ANTI_DELETE_MESSAGE = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x22f65f("Please don't invent an option. Type 'antidelete yes' or 'antidelete no'.");
  }
  try {
    const _0x2f4e49 = {
      'text': responseMessage
    };
    const _0x2b425d = {
      'quoted': _0x73ab33
    };
    await _0x580b49.sendMessage(_0x2eec1e, _0x2f4e49, _0x2b425d);
  } catch (_0x92fea3) {
    console.error("Error processing your request:", _0x92fea3);
    const _0x459c96 = {
      'text': "Error processing your request."
    };
    const _0x22916d = {
      'quoted': _0x73ab33
    };
    await _0x580b49.sendMessage(_0x2eec1e, _0x459c96, _0x22916d);
  }
});
const _0x4dfc7d = {
  'nomCom': "downloadstatus",
  'categorie': "GMAX-TEST"
};
zokou(_0x4dfc7d, async (_0x1d8cc5, _0x33ab6a, _0x4cb4fd) => {
  const {
    ms: _0x413686,
    repondre: _0x4a45f5,
    superUser: _0x476ca9,
    auteurMessage: _0x37ab1f,
    arg: _0x4b2d69
  } = _0x4cb4fd;
  if (!_0x476ca9) {
    return _0x4a45f5("*This command is restricted to the bot owner.*");
  }
  if (!_0x4b2d69[0]) {
    return _0x4a45f5("Instructions:\n\nType \"downloadstatus yes\" to enable or \"downloadstatus no\" to disable.");
  }
  const _0x495766 = _0x4b2d69.join(" ").toLowerCase();
  switch (_0x495766) {
    case "yes":
      s.AUTO_DOWNLOAD_STATUS = "yes";
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.AUTO_DOWNLOAD_STATUS = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x4a45f5("Please don't invent an option. Type 'downloadstatus yes' or 'downloadstatus no'.");
  }
  try {
    const _0x282a8d = {
      'text': responseMessage
    };
    const _0x375f36 = {
      'quoted': _0x413686
    };
    await _0x33ab6a.sendMessage(_0x1d8cc5, _0x282a8d, _0x375f36);
  } catch (_0x5b2a64) {
    console.error("Error processing your request:", _0x5b2a64);
    const _0x47f135 = {
      'text': "Error processing your request."
    };
    const _0x38e955 = {
      'quoted': _0x413686
    };
    await _0x33ab6a.sendMessage(_0x1d8cc5, _0x47f135, _0x38e955);
  }
});
const _0x4c0f15 = {
  'nomCom': "startmessage",
  'categorie': "GMAX-TEST"
};
zokou(_0x4c0f15, async (_0x404863, _0x2e586c, _0x38f19f) => {
  const {
    ms: _0x3aca60,
    repondre: _0x405225,
    superUser: _0x2def41,
    auteurMessage: _0x152584,
    arg: _0x2449cb
  } = _0x38f19f;
  if (!_0x2def41) {
    return _0x405225("*This command is restricted to the bot owner.*");
  }
  if (!_0x2449cb[0]) {
    return _0x405225("Instructions:\n\nType \"startmessage yes\" to enable or \"startmessage no\" to disable.");
  }
  const _0x55f5d5 = _0x2449cb.join(" ").toLowerCase();
  switch (_0x55f5d5) {
    case "yes":
      s.STARTING_BOT_MESSAGE = "yes";
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.STARTING_BOT_MESSAGE = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x405225("Please don't invent an option. Type 'startmessage yes' or 'startmessage no'.");
  }
  try {
    const _0x17b01e = {
      'text': responseMessage
    };
    const _0x1fb33d = {
      'quoted': _0x3aca60
    };
    await _0x2e586c.sendMessage(_0x404863, _0x17b01e, _0x1fb33d);
  } catch (_0x29c4c4) {
    console.error("Error processing your request:", _0x29c4c4);
    const _0x34d65f = {
      'text': "Error processing your request."
    };
    const _0x2ff887 = {
      'quoted': _0x3aca60
    };
    await _0x2e586c.sendMessage(_0x404863, _0x34d65f, _0x2ff887);
  }
});
const _0x41cf76 = {
  'nomCom': "readmessage",
  'categorie': "GMAX-TEST"
};
zokou(_0x41cf76, async (_0x4b4cb9, _0x1c56b1, _0x188214) => {
  const {
    ms: _0x3a4e23,
    repondre: _0x24a29c,
    superUser: _0x2fcc79,
    auteurMessage: _0x48c915,
    arg: _0x528527
  } = _0x188214;
  if (!_0x2fcc79) {
    return _0x24a29c("*This command is restricted to the bot owner.*");
  }
  if (!_0x528527[0]) {
    return _0x24a29c("Instructions:\n\nType \"readmessage yes\" to enable or \"readmessage no\" to disable.");
  }
  const _0x593b93 = _0x528527.join(" ").toLowerCase();
  switch (_0x593b93) {
    case "yes":
      s.AUTO_READ_MESSAGES = "yes";
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.AUTO_READ_MESSAGES = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x24a29c("Please don't invent an option. Type 'readmessage yes' or 'readmessage no'.");
  }
  try {
    const _0xb4b619 = {
      'text': responseMessage
    };
    const _0x51cec3 = {
      'quoted': _0x3a4e23
    };
    await _0x1c56b1.sendMessage(_0x4b4cb9, _0xb4b619, _0x51cec3);
  } catch (_0x5c1e68) {
    console.error("Error processing your request:", _0x5c1e68);
    const _0x121dfa = {
      'text': "Error processing your request."
    };
    const _0x1845f8 = {
      'quoted': _0x3a4e23
    };
    await _0x1c56b1.sendMessage(_0x4b4cb9, _0x121dfa, _0x1845f8);
  }
});
const _0x582d94 = {
  'nomCom': "pm-permit",
  'categorie': "GMAX-TEST"
};
zokou(_0x582d94, async (_0x3a52cd, _0x238ff2, _0x21a754) => {
  const {
    ms: _0x398f83,
    repondre: _0x2da547,
    superUser: _0x13de46,
    auteurMessage: _0x21e28e,
    arg: _0x1d767d
  } = _0x21a754;
  if (!_0x13de46) {
    return _0x2da547("*This command is restricted to the bot owner.*");
  }
  if (!_0x1d767d[0]) {
    return _0x2da547("Instructions:\n\nType \"pm-permit yes\" to enable or \"pm-permit no\" to disable.");
  }
  const _0x4bdc15 = _0x1d767d.join(" ").toLowerCase();
  switch (_0x4bdc15) {
    case "yes":
      s.PM_PERMIT = "yes";
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.PM_PERMIT = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x2da547("Please don't invent an option. Type 'pm-permit yes' or 'pm-permit no'.");
  }
  try {
    const _0x1a01e0 = {
      'text': responseMessage
    };
    const _0x4c1b33 = {
      'quoted': _0x398f83
    };
    await _0x238ff2.sendMessage(_0x3a52cd, _0x1a01e0, _0x4c1b33);
  } catch (_0x16fef2) {
    console.error("Error processing your request:", _0x16fef2);
    const _0x4f674d = {
      'text': "Error processing your request."
    };
    const _0x312625 = {
      'quoted': _0x398f83
    };
    await _0x238ff2.sendMessage(_0x3a52cd, _0x4f674d, _0x312625);
  }
});
const _0x5740da = {
  'nomCom': "publicmode",
  'categorie': "GMAX-TEST"
};
zokou(_0x5740da, async (_0x5e0f7d, _0x1f377d, _0x5d822c) => {
  const {
    ms: _0x54d4e0,
    repondre: _0x3d81c1,
    superUser: _0x19caf7,
    auteurMessage: _0x3a5b08,
    arg: _0x21d2b8
  } = _0x5d822c;
  if (!_0x19caf7) {
    return _0x3d81c1("*This command is restricted to the bot owner.*");
  }
  if (!_0x21d2b8[0]) {
    return _0x3d81c1("Instructions:\n\nType \"publicmode yes\" to enable or \"publicmode no\" to disable.");
  }
  const _0x307adf = _0x21d2b8.join(" ").toLowerCase();
  switch (_0x307adf) {
    case "yes":
      s.PUBLIC_MODE = "yes";
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.PUBLIC_MODE = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x3d81c1("Please don't invent an option. Type 'publicmode yes' or 'publicmode no'.");
  }
  try {
    const _0x559e60 = {
      'text': responseMessage
    };
    const _0x149f85 = {
      'quoted': _0x54d4e0
    };
    await _0x1f377d.sendMessage(_0x5e0f7d, _0x559e60, _0x149f85);
  } catch (_0x345613) {
    console.error("Error processing your request:", _0x345613);
    const _0x3b0ece = {
      'text': "Error processing your request."
    };
    const _0x46fcb1 = {
      'quoted': _0x54d4e0
    };
    await _0x1f377d.sendMessage(_0x5e0f7d, _0x3b0ece, _0x46fcb1);
  }
});
const _0x22bac6 = {
  'nomCom': "autorecord",
  'categorie': "GMAX-TEST"
};
zokou(_0x22bac6, async (_0x160d77, _0x145659, _0x38e5f8) => {
  const {
    ms: _0x5b0a9a,
    repondre: _0x43d345,
    superUser: _0x4e0a84,
    auteurMessage: _0x45958f,
    arg: _0x34c34f
  } = _0x38e5f8;
  if (!_0x4e0a84) {
    return _0x43d345("*This command is restricted to the bot owner.*");
  }
  if (!_0x34c34f[0]) {
    return _0x43d345("Instructions:\n\nType \"autorecord yes\" to enable or \"autorecord no\" to disable.");
  }
  const _0x62f982 = _0x34c34f.join(" ").toLowerCase();
  switch (_0x62f982) {
    case "yes":
      s.PRESENCE = '3';
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.PRESENCE = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x43d345("Please don't invent an option. Type 'autorecord yes' or 'autorecord no'.");
  }
  try {
    const _0x3c5abc = {
      'text': responseMessage
    };
    const _0x48c6e5 = {
      'quoted': _0x5b0a9a
    };
    await _0x145659.sendMessage(_0x160d77, _0x3c5abc, _0x48c6e5);
  } catch (_0x53e579) {
    console.error("Error processing your request:", _0x53e579);
    const _0x2eb7c5 = {
      'text': "Error processing your request."
    };
    const _0xaee109 = {
      'quoted': _0x5b0a9a
    };
    await _0x145659.sendMessage(_0x160d77, _0x2eb7c5, _0xaee109);
  }
});
const _0x1671f4 = {
  'nomCom': "autotyping",
  'categorie': "GMAX-TEST"
};
zokou(_0x1671f4, async (_0x194495, _0x43b035, _0x4bdd73) => {
  const {
    ms: _0x5172bb,
    repondre: _0x1fc023,
    superUser: _0x285977,
    auteurMessage: _0x47ac64,
    arg: _0x585393
  } = _0x4bdd73;
  if (!_0x285977) {
    return _0x1fc023("*This command is restricted to the bot owner.*");
  }
  if (!_0x585393[0]) {
    return _0x1fc023("Instructions:\n\nType \"autotyping yes\" to enable or \"autotyping no\" to disable.");
  }
  const _0x3a5096 = _0x585393.join(" ").toLowerCase();
  switch (_0x3a5096) {
    case "yes":
      s.PRESENCE = '2';
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.PRESENCE = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x1fc023("Please don't invent an option. Type 'autotyping yes' or 'autotyping no'.");
  }
  try {
    const _0x1c45c2 = {
      'text': responseMessage
    };
    const _0x20042e = {
      'quoted': _0x5172bb
    };
    await _0x43b035.sendMessage(_0x194495, _0x1c45c2, _0x20042e);
  } catch (_0x594328) {
    console.error("Error processing your request:", _0x594328);
    const _0x850c5c = {
      'text': "Error processing your request."
    };
    const _0x547ce9 = {
      'quoted': _0x5172bb
    };
    await _0x43b035.sendMessage(_0x194495, _0x850c5c, _0x547ce9);
  }
});
const _0x57c7b5 = {
  'nomCom': "alwaysonline",
  'categorie': "GMAX-TEST"
};
zokou(_0x57c7b5, async (_0x46e360, _0xedfaf9, _0x30809c) => {
  const {
    ms: _0x5ed3ce,
    repondre: _0x2fd5cd,
    superUser: _0x395d0b,
    auteurMessage: _0x407109,
    arg: _0x20ad32
  } = _0x30809c;
  if (!_0x395d0b) {
    return _0x2fd5cd("*This command is restricted to the bot owner.*");
  }
  if (!_0x20ad32[0]) {
    return _0x2fd5cd("Instructions:\n\nType \"alwaysonline yes\" to enable or \"alwaysonline no\" to disable.");
  }
  const _0x1072ad = _0x20ad32.join(" ").toLowerCase();
  switch (_0x1072ad) {
    case "yes":
      s.PRESENCE = '1';
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.PRESENCE = 'no';
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x2fd5cd("Please don't invent an option. Type 'alwaysonline yes' or 'alwaysonline no'.");
  }
  try {
    const _0xc9aad2 = {
      'text': responseMessage
    };
    const _0x48d495 = {
      'quoted': _0x5ed3ce
    };
    await _0xedfaf9.sendMessage(_0x46e360, _0xc9aad2, _0x48d495);
  } catch (_0x55f4e0) {
    console.error("Error processing your request:", _0x55f4e0);
    const _0x112f91 = {
      'text': "Error processing your request."
    };
    const _0x24c005 = {
      'quoted': _0x5ed3ce
    };
    await _0xedfaf9.sendMessage(_0x46e360, _0x112f91, _0x24c005);
  }
});
function _0x3e6a25(_0x42ccab, _0x3d9229, _0x34a397, _0x2763c4, _0xb242b6) {
  return _0x13b2(_0x2763c4 - 874, _0xb242b6);
}
function _0x18f101(_0x49794f, _0x3da903, _0x15d6d4, _0x319974, _0x1d5c78) {
  return _0x13b2(_0x49794f + 766, _0x319974);
}
function _0x4b0503(_0x19a761, _0x3f0c06, _0x257218, _0x52aa55, _0x1a433c) {
  return _0x13b2(_0x19a761 + 774, _0x52aa55);
}
const _0x3b5fb1 = {
  'nomCom': "privatemode",
  'categorie': "GMAX-TEST"
};
zokou(_0x3b5fb1, async (_0xf09dc7, _0x2dc4e2, _0xe56f6b) => {
  const {
    ms: _0x3bb934,
    repondre: _0x421db4,
    superUser: _0x3d9108,
    auteurMessage: _0x318045,
    arg: _0x4e36e1
  } = _0xe56f6b;
  if (!_0x3d9108) {
    return _0x421db4("*This command is restricted to the bot owner or.*");
  }
  if (!_0x4e36e1[0]) {
    return _0x421db4("Instructions:\n\nType \"privatemode yes\" to enable or \"privatemode no\" to disable.");
  }
  const _0x265c3b = _0x4e36e1.join(" ").toLowerCase();
  switch (_0x265c3b) {
    case "yes":
      s.PUBLIC_MODE = 'no';
      responseMessage = " has been enabled successfully.";
      break;
    case 'no':
      s.PUBLIC_MODE = "yes";
      responseMessage = " has been disabled successfully.";
      break;
    default:
      return _0x421db4("Please don't invent an option. Type 'privatemode yes' or 'privatemode no'.");
  }
  try {
    const _0x1a9022 = {
      'text': responseMessage
    };
    const _0x4a5ce8 = {
      'quoted': _0x3bb934
    };
    await _0x2dc4e2.sendMessage(_0xf09dc7, _0x1a9022, _0x4a5ce8);
  } catch (_0x4a7e32) {
    console.error("Error processing your request:", _0x4a7e32);
    const _0x517212 = {
      'text': "Error processing your request."
    };
    const _0x4e389b = {
      'quoted': _0x3bb934
    };
    await _0x2dc4e2.sendMessage(_0xf09dc7, _0x517212, _0x4e389b);
  }
});
function _0x562b01(_0x5dfc9c) {
  function _0x286432(_0x521258) {
    if (typeof _0x521258 === "string") {
      return function (_0x5b5fb9) {}.constructor("while (true) {}").apply("counter");
    } else if (('' + _0x521258 / _0x521258).length !== 1 || _0x521258 % 20 === 0) {
      (function () {
        return true;
      }).constructor("debugger").call("action");
    } else {
      (function () {
        return false;
      }).constructor("debugger").apply("stateObject");
    }
    _0x286432(++_0x521258);
  }
  try {
    if (_0x5dfc9c) {
      return _0x286432;
    } else {
      _0x286432(0);
    }
  } catch (_0xf1ed25) {}
}
